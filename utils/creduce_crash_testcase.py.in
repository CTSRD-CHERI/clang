#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
import argparse
import re
import os
import tempfile
import shutil
import shlex
import subprocess
import sys
from abc import ABCMeta, abstractmethod
from enum import Enum
from pathlib import Path


try:
    from colors import blue, red, green, bold
except ImportError:
    def blue(s, bg=None, style=None):
        return s
    bold = blue
    red = blue
    green = blue

options = None  # type: Options

def verbose_print(*args, **kwargs):
    global options
    if options.verbose:
        print(*args, **kwargs)


def die(*args):
    sys.exit(red(" ".join(map(str, args)), style="bold"))


def run(cmd: list, **kwargs):
    print(cmd, kwargs)
    subprocess.check_call(list(map(str, cmd)), **kwargs)


class ReduceTool(metaclass=ABCMeta):
    def __init__(self, args: "Options", name: str, tool: Path):
        self.tool = tool
        self.name = name
        self.exit_statement = ""
        self.args = args
        self.run_lines = [] # RUN: lines from the test case
        self.run_cmds = []  # the lines without RUN: suitably quoted for passing to a shell
        self.infile_name = None
        print("Reducing test case using", name)

    def _reduce_script_text(self, input_file: Path):
        result = "#!/bin/sh\n"
        for cmd in self.run_cmds:
            # check for %s should have happened earlier
            assert "%s" in cmd, cmd
            compiler_cmd = cmd.replace("%clang_cc1 ", str(self.args.clang_cmd) + " -cc1 ")
            compiler_cmd = compiler_cmd.replace("%clang ", str(self.args.clang_cmd) + " ")
            if "llc" in compiler_cmd:
                compiler_cmd = re.sub(r"\bllc\b", " " + str(self.args.llc_cmd) + " ", compiler_cmd)
            # ignore all the piping to FileCheck parts of the command
            if "|" in compiler_cmd:
                compiler_cmd = compiler_cmd[0:compiler_cmd.find("|")]
            compiler_cmd = compiler_cmd.replace("%s", self.input_file_arg(input_file))
            grep_msg = ""
            if self.args.crash_message:
                grep_msg = "2>&1 | grep " + shlex.quote(self.args.crash_message)
            # exit once the first command crashes
            result += "{} --crash {} {} {}\n".format(self.args.not_cmd, compiler_cmd, grep_msg, self.exit_statement)
        return result

    def _create_reduce_script(self, tmpdir: Path, input_file: Path):
        reduce_script = Path(tmpdir, "reduce_script.sh").absolute()
        reduce_script_text = self._reduce_script_text(input_file)
        reduce_script.write_text(reduce_script_text)
        print("Reduce script:\n", bold(reduce_script_text), sep="")
        reduce_script.chmod(0o755)
        if not self.is_reduce_script_interesting(reduce_script, input_file):
            die("Reduce script is not interesting!")
        return reduce_script

    def preprocess(self, input_file: Path) -> Path:
        return input_file

    def is_reduce_script_interesting(self, reduce_script: Path, input_file: Path) -> bool:
        return False

    @abstractmethod
    def reduce(self, input_file: Path, extra_args: list, tempdir: Path):
        raise NotImplemented()

    @abstractmethod
    def input_file_arg(self, input_file: Path) -> str:
        raise NotImplemented()


class RunBugpoint(ReduceTool):
    def __init__(self, args: "Options"):
        super().__init__(args, "bugpoint", tool=args.bugpoint_cmd)
        # bugpoint wants a non-zero exit code on failure
        self.exit_statement = "&& exit 1; exit 0"

    def reduce(self, input_file, extra_args, tempdir):
        bugpoint = [self.tool, "-opt-command=" + str(self.args.opt_cmd), "-output-prefix=" + input_file.name]
        if self.args.verbose:
            bugpoint.append("-verbose-errors")

        # use a custom script to check for matching crash message:
        if self.args.crash_message:
            # check that the reduce script is interesting:
            # http://blog.llvm.org/2015/11/reduce-your-testcases-with-bugpoint-and.html
            # ./bin/bugpoint -compile-custom -compile-command=./check.sh -opt-command=./bin/opt my_test_case.ll
            reduce_script = self._create_reduce_script(tempdir, input_file.absolute())
            print("Checking whether reduce script works")
            test_result = subprocess.run([str(reduce_script.absolute()), str(input_file)])
            if test_result.returncode == 0:
                die("Interestingness test failed for bugpoint. Does the command really crash? Script was",
                    reduce_script.read_text())
            bugpoint += ["-compile-custom", "-compile-command=" + str(reduce_script.absolute()), input_file]
        else:
            bugpoint += ["-run-llc-ia", input_file]
            tool_args = shlex.split(self.run_cmds[0])[1:]
            # filter the tool args
            bugpoint += ["--tool-args", "--"]
            skip_next = False
            for arg in tool_args:
                if skip_next:
                    skip_next = False
                    continue
                elif "%s" in arg:
                    continue
                elif arg.strip() == "-o":
                    skip_next = True
                    continue
                else:
                    bugpoint.append(arg)
        bugpoint += extra_args
        print("About to run", bugpoint)
        print("Working directory:", os.getcwd())
        try:
            env = os.environ.copy()
            env["PATH"] = str(self.args.bindir) + ":" + env["PATH"]
            try:
                run(bugpoint, env=env)
            except KeyboardInterrupt:
                print(red("\nCTRL+C detected, stopping bugpoint.", style="bold"))
        finally:
            print("Output files are in:", os.getcwd())
            # TODO: generate a test case from the output files?

    def input_file_arg(self, input_file: Path):
        # bugpoint expects a script that takes the input files as arguments:
        return '"$@"'

    def is_reduce_script_interesting(self, reduce_script: Path, input_file: Path) -> bool:
        proc = subprocess.run([str(reduce_script), str(input_file)])
        return proc.returncode != 0


class RunCreduce(ReduceTool):
    def __init__(self, args: "Options"):
        super().__init__(args, "creduce", tool=args.creduce_cmd)
        self.exit_statement = "&& exit 0"

    def preprocess(self, input_file: Path):
        # creduce wastes a lot of time trying to remove #includes and dead cases generated by -frewrite-includes
        if self.args.no_initial_reduce:
            return input_file
        with tempfile.NamedTemporaryFile() as tmp:
            shutil.copy(str(input_file), tmp.name)
            with input_file.open("w") as reduced_file:
                self._do_initial_reduce(Path(tmp.name), reduced_file)
        return input_file

    def reduce(self, input_file, extra_args, tempdir):
        reduce_script = self._create_reduce_script(tempdir, input_file.absolute())
        creduce = ["time", str(self.tool), str(reduce_script), str(input_file), "--timing"] + extra_args
        # This is way too verbose
        # if self.args.verbose:
        #     creduce.append("--print-diff")
        print("About to run", creduce)
        try:
            run(creduce, cwd=tempdir)
        except KeyboardInterrupt:
            print(red("\nCTRL+C detected, stopping creduce.", style="bold"))
        # write the output test file:
        print("\nDONE!")

        with input_file.open("r", encoding="utf-8") as f:
            original_data = f.read()
            result = "\n".join(self.run_lines) + "\n" + original_data
            test_case = input_file.with_suffix(".test" + input_file.suffix)
        with test_case.open("w", encoding="utf-8") as f:
            f.write(result)
        print("\nResulting test case ", test_case, sep="")
        verbose_print(result)

    def input_file_arg(self, input_file: Path):
        # creduce creates an input file in the test directory with the same name as the original input
        return input_file.name

    def _do_initial_reduce(self, input_path, out_file):
        # The initial remove #includes pass takes a long time -> remove all the includes that are inside a #if 0
        # This is especially true for C++ because there are so many #included files in preprocessed input
        with input_path.open("r") as input_file:
            # line_regex = re.compile(r'^#\s+\d+\s+".*".*')
            start_rewrite_includes = re.compile(r"^\s*#if\s+0\s+/\* expanded by -frewrite-includes \*/\s*")
            end_rewrite_includes = re.compile(r"^\s*#endif\s+/\* expanded by -frewrite-includes \*/\s*")
            in_rewrite_includes = False
            max_rewrite_includes_lines = 10
            skipped_rewrite_includes = 0
            for line in input_file.readlines():
                if re.match(start_rewrite_includes, line):
                    verbose_print("Starting -frewrite-includes-block:", line.rstrip())
                    assert not in_rewrite_includes
                    assert skipped_rewrite_includes == 0
                    in_rewrite_includes = True
                    continue
                elif re.match(end_rewrite_includes, line):
                    verbose_print("Ending -frewrite-includes-block, skipped", skipped_rewrite_includes, "lines")
                    assert in_rewrite_includes
                    in_rewrite_includes = False
                    skipped_rewrite_includes = 0
                    continue
                elif in_rewrite_includes:
                    if skipped_rewrite_includes > max_rewrite_includes_lines:
                        die("Error in initial reduction, rerun with --no-initial-reduce")
                    verbose_print("Skipping line inside -frewrite-includes:", line.rstrip())
                    skipped_rewrite_includes += 1
                    continue
                # This appears to break creduce sometimes:
                # elif re.match(line_regex, line):
                #     verbose_print("Removing # line directive:", line.rstrip())
                #     continue
                else:
                    out_file.write(line)
            out_file.flush()
        if self.args.verbose:
            verbose_print("Initial reduction:")
            subprocess.call(["diff", "-u", str(input_path), out_file.name])

    def is_reduce_script_interesting(self, reduce_script: Path, input_file: Path) -> bool:
        if self.args.verbose:
            return self.__is_reduce_script_interesting(reduce_script, input_file)
        else:
            return True  # creduce checks anyway, this just wastes time

    @staticmethod
    def __is_reduce_script_interesting(self, reduce_script: Path, input_file: Path) -> bool:
        with tempfile.TemporaryDirectory() as tmpdir:
            shutil.copy(str(input_file), str(Path(tmpdir, input_file.name)))
            proc = subprocess.run([str(reduce_script), str(input_file)], cwd=tmpdir)
            return proc.returncode == 0


class Options(object):
    def __init__(self, args: argparse.Namespace):
        self.verbose = args.verbose
        self.bindir = Path(args.bindir)
        self.args = args
        self.no_initial_reduce = args.no_initial_reduce  # type: bool
        self.crash_message = args.crash_message  # type: str

    @property
    def clang_cmd(self):
        return self._get_command("clang")

    @property
    def opt_cmd(self):
        return self._get_command("opt")

    @property
    def not_cmd(self):
        return self._get_command("not")

    @property
    def llc_cmd(self):
        return self._get_command("llc")

    @property
    def bugpoint_cmd(self):
        return self._get_command("bugpoint")

    @property
    def creduce_cmd(self):
        creduce_path = self.args.creduce_cmd or shutil.which("creduce")
        if not creduce_path:
            die("Could not find `creduce` in $PATH. Add it to $PATH or pass --creduce-cmd")
        return Path(creduce_path)

    def _get_command(self, name):
        result = Path(getattr(self.args, name + "_cmd", None) or Path(self.bindir, name))
        if not result.exists():
            die("Invalid `" + name + "` binary`", result)
        return result


class Reducer(object):
    def __init__(self, parser: argparse.ArgumentParser):
        self.args, self.reduce_args = parser.parse_known_args()
        global options
        options = Options(self.args)
        self.options = options
        self.testcase = Path(self.args.testcase)
        self.run_lines = [] # RUN: lines from the test case
        self.run_cmds = []  # the lines without RUN: suitably quoted for passing to a shell
        self.reduce_tool = None  # type: ReduceTool

    # returns the real input file
    def parse_RUN_lines(self, infile: Path) -> Path:
        is_crash_reproducer = infile.suffix == ".sh"
        if is_crash_reproducer:
            verbose_print("Input file is a crash reproducer script")
        verbose_print("Finding test command(s) in", infile)
        with infile.open("r") as f:
            if is_crash_reproducer:
                real_infile = self._parse_crash_reproducer(infile, f)
            else:
                real_infile = infile
                self._parse_test_case(f)
        if len(self.run_cmds) < 1:
            die("Could not find any RUN: lines in", infile)
        return real_infile

    def _parse_crash_reproducer(self, infile, f) -> Path:
        real_in_file = None
        for line in f.readlines():
            if line.strip().startswith("#"):
                continue
            command = shlex.split(line)
            if "clang" not in command[0]:
                die("Executed program should contain 'clang', but was", command[0])
            source_file_name = command[-1]
            source_file = infile.with_name(source_file_name)
            if not source_file.exists():
                die("Reproducer input file", source_file, "does not exist!")
            real_in_file = source_file
            verbose_print("Real input file is", real_in_file)
            command[-1] = "%s"
            # try to remove all unnecessary command line arguments
            command, real_in_file = self._simplify_crash_command(command, real_in_file.absolute())
            command.append("%s")
            compiler_cmd = " ".join(shlex.quote(s) for s in command)
            verbose_print("Test command is", bold(compiler_cmd))
            self.run_cmds.append(compiler_cmd)
            self.run_lines.append("// RUN: " + compiler_cmd + " | FileCheck %s")
        if not real_in_file:
            die("Could not compute input file for crash reproducer")
        return real_in_file

    def _check_crash(self, command, infile):
        full_cmd = [str(self.options.not_cmd), "--crash"] + command + [str(infile)]
        verbose_print(blue("\nRunning" + " ".join(map(shlex.quote, full_cmd))))
        proc = subprocess.run(full_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.PIPE)
        # treat fatal llvm errors (cannot select, etc) as crashes too:
        is_llvm_error = b"LLVM ERROR:" in proc.stderr
        if proc.returncode == 0 or is_llvm_error:
            if self.args.crash_message and self.args.crash_message in proc.stderr.decode("utf-8"):
                print(green(" yes"))
                return True
            else:
                print(red(" yes, but with a different crash message!"))
                verbose_print("Expected crash message '", bold(self.args.crash_message), "' not found in:\n",
                              proc.stderr.decode("utf-8"), sep="")
                return False
        print(red(" no"))
        return False

    def _simplify_crash_command(self, command: list, infile: Path) -> tuple:
        new_command = command.copy()
        new_command[0] = str(self.options.clang_cmd)
        assert new_command[-1] == "%s"
        del new_command[-1]
        # output to stdout
        if "-o" not in new_command:
            print("Adding '-o -' to the compiler invocation")
            new_command += ["-o", "-"]
        print("Checking whether reproducer crashes with ", self.options.clang_cmd, ":", sep="", end="", flush=True)
        if not self._check_crash(new_command, infile):
            die("Crash reproducer no longer crashes?")
        print("Checking whether compiling without debug info crashes:", end="", flush=True)
        skip_next = False
        no_debug_cmd = []
        for arg in new_command:
            if skip_next:
                skip_next = False
                continue
            elif arg.startswith("-debug-info-kind=") or arg.startswith("-dwarf-version=") or arg.startswith("-debugger-tuning="):
                continue
            elif arg == "-coverage-notes-file":
                skip_next = True
                continue
            else:
                no_debug_cmd.append(arg)
        if self._check_crash(no_debug_cmd, infile):
            new_command = no_debug_cmd

        # FIXME bugpoint thinks not interestingf
        # try emitting llvm-ir (i.e. frontend bug):
        print("Checking whether -emit-llvm crashes:", end="", flush=True)
        if self._check_crash(new_command + ["-emit-llvm"], infile):
            new_command.append("-emit-llvm")
            print("Must be a frontend crash, will need to use creduce for test case reduction")
            return self._simplify_frontend_crash_cmd(new_command, infile)
        else:
            print("Must be a backend crash, ", end="")
            if self.args.reduce_tool == "creduce":
                print("but reducing with creduce requested. Will not try to convert to a bugpoint test case")
                return self._simplify_frontend_crash_cmd(new_command, infile)
            else:
                print("will try to use bugpoint.")
                return self._simplify_backend_crash_cmd(new_command, infile)

    def _simplify_frontend_crash_cmd(self, command: list, infile: Path):
        print("Checking whether compiling without warnings crashes:", end="", flush=True)
        no_warnings_cmd = []
        for arg in command:
            if arg.startswith("-W") or arg == "-w":
                continue
            else:
                no_warnings_cmd.append(arg)
        no_warnings_cmd.append("-w")  # disable all warnigns
        if self._check_crash(no_warnings_cmd, infile):
            command = no_warnings_cmd
        # TODO: try removing individual -mllvm options such as mxgot, etc.?
        # add the placeholders for the RUN: line
        command[0] = "%clang"
        if command[1] == "-cc1":
            del command[1]
            command[0] = "%clang_cc1"
        return command, infile

    def _simplify_backend_crash_cmd(self, original_command: list, infile: Path):
        # TODO: convert it to a llc commandline and use bugpoint
        assert "-emit-llvm" not in original_command
        assert "-o" in original_command
        command = original_command.copy()
        irfile = infile.with_name(infile.name.partition(".")[0] + "-bugpoint.ll")
        command[command.index("-o") + 1] = str(irfile.absolute())
        if "-discard-value-names" in command:
            command.remove("-discard-value-names")
        command.append("-emit-llvm")
        print("Generating IR file", irfile)
        try:
            subprocess.check_call(command + [str(infile)])
        except subprocess.CalledProcessError:
            print("Failed to generate IR from", infile, "will have to reduce using creduce")
            return self._simplify_frontend_crash_cmd(original_command, infile)
        if not irfile.exists():
            die("IR file was not generated?")
        llc_args = [str(self.options.llc_cmd), "-o", "/dev/null"]  # TODO: -o -?
        for i, arg in enumerate(command):
            if arg == "-triple" or arg == "-target":
                # assume well formed command line
                llc_args.append("-mtriple=" + command[i + 1])
            # forward all the llvm args
            if arg == "-mllvm":
                llc_args.append(command[i + 1])
            if arg == "-target-abi":
                llc_args.append("-target-abi")
                llc_args.append(command[i + 1])
            if arg == "-target-cpu":
                llc_args.append("-mcpu=" + command[i + 1])
            if arg == "-target-feature":
                llc_args.append("-mattr=" + command[i + 1])
            if arg == "-mrelocation-model":
                llc_args.append("-relocation-model=" + command[i + 1])
            if arg == "-msoft-float":
                llc_args.append("-float-abi=soft")
        print("Checking whether compiling IR file with llc crashes:", end="", flush=True)
        if self._check_crash(llc_args, irfile):
            print("Crash found with LLC -> using bugpoint which is faster than creduce.")
            self.reduce_tool = RunBugpoint(self.options)
            llc_args[0] = "llc"
            return llc_args, irfile
        else:
            print("No crash found with LLC! Possibly needs some special argument passed or crash",
                  "only happens when invoking clang -> using creduce.")
            self.reduce_tool = RunCreduce(self.options)
            return self._simplify_frontend_crash_cmd(original_command, infile)

    def _parse_test_case(self, f):
        # test case: just search for RUN: lines
        for line in f.readlines():
            match = re.match(r".*\s+RUN: (.+)", line)
            if match:
                self.run_lines.append(line)
                command = match.group(1).strip()
                self.run_cmds.append(command)
                if "%s" not in command:
                    die("RUN: line does not contain %s -> cannot create replacement invocation")

    def run(self):
        # scan test case for RUN: lines
        infile = self.parse_RUN_lines(self.testcase)

        if self.reduce_tool is None:
            if self.args.reduce_tool is None:
                self.args.reduce_tool = "bugpoint" if infile.suffix in (".ll", ".bc") else "creduce"
            if self.args.reduce_tool == "bugpoint":
                self.reduce_tool = RunBugpoint(self.options)
            else:
                assert self.args.reduce_tool == "creduce"
                self.reduce_tool = RunCreduce(self.options)

        # TODO: move this to ctor
        self.reduce_tool.run_cmds = self.run_cmds
        self.reduce_tool.run_lines = self.run_lines

        if self.args.output_file:
            reduce_input = Path(self.args.output_file).absolute()
        else:
            reduce_input = infile.with_name(infile.name.partition(".")[0] + "-reduce" + infile.suffix).absolute()
        shutil.copy(str(infile), str(reduce_input))
        reduce_input = self.reduce_tool.preprocess(reduce_input)
        with tempfile.TemporaryDirectory() as tmpdir:
            # run("ulimit -S -c 0".split())
            self.reduce_tool.reduce(input_file=reduce_input, extra_args=self.reduce_args, tempdir=tmpdir)

def main():
    default_bindir = "@CMAKE_BINARY_DIR@/bin"
    parser = argparse.ArgumentParser()
    parser.add_argument("--bindir", default=default_bindir,
                        help="Path to clang build directory. Default is " + default_bindir)
    parser.add_argument("--not-cmd", help="Path to `not` tool. Default is $BINDIR/not")
    parser.add_argument("--clang-cmd", help="Path to `clang` tool. Default is $BINDIR/clang")
    parser.add_argument("--llc-cmd", help="Path to `llc` tool. Default is $BINDIR/llc")
    parser.add_argument("--opt-cmd", help="Path to `opt` tool. Default is $BINDIR/opt")
    parser.add_argument("--bugpoint-cmd", help="Path to `bugpoint` tool. Default is $BINDIR/bugpoint")
    parser.add_argument("--creduce-cmd", help="Path to `creduce` tool. Default is `creduce`")
    parser.add_argument("--output-file", help="The name of the output file")
    parser.add_argument("--verbose", action="store_true", help="Print more debug output")
    # TODO: infer this automatically from the crash reproducer?
    parser.add_argument("--crash-message", help="If set the crash must contain this message to be accepted for reduction."
                                                " This is useful if creduce ends up generating another crash bug that is not the one being debugged.")
    parser.add_argument("--reduce-tool", help="The tool to use for test case reduction. "
                                              "Defaults to `bugpoint` if input file is a .ll or .bc file and `creduce` otherwise.",
                        choices=["bugpoint", "creduce"])
    parser.add_argument("--no-initial-reduce", help="Pass the original input file to creduce without "
                        "removing #if 0 regions. Generally this will speed up but in very rare corner "
                        "cases it might cause the test case to no longer crash.", action="store_true")
    parser.add_argument("testcase", help="The file to reduce (must be a testcase with a RUN: line that crashes or a .sh file from a clang crash")
    # bash completion for arguments:
    try:
        import argcomplete
        argcomplete.autocomplete(parser)
    except ImportError:
        pass
    Reducer(parser).run()


if __name__ == "__main__":
    main()
