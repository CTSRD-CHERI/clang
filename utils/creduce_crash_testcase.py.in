#!/usr/bin/env python3
import argparse
import re
import subprocess
import sys
import tempfile
import shutil
from pathlib import Path


def die(*args):
    sys.exit(" ".join(map(str, args)))


def run(*args, **kwargs):
    print(args, kwargs)
    subprocess.check_call(*args, **kwargs)


def main():
    default_bindir = "@CMAKE_BINARY_DIR@/bin"
    parser = argparse.ArgumentParser()
    parser.add_argument("--bindir", default=default_bindir,
                        help="Path to clang build directory. Default is " + default_bindir)
    parser.add_argument("--not-cmd", help="Path to `not` tool. Default is $BINDIR/not")
    parser.add_argument("--clang-cmd", help="Path to `clang` tool. Default is $BINDIR/clang")
    parser.add_argument("testcase", help="The file to reduce (must be a testcase with a RUN: line that crashes")
    args = parser.parse_args()

    bindir = Path(args.bindir)
    not_cmd = Path(args.not_cmd or (bindir / "not"))
    if not not_cmd.exists():
        die("Invalid `not` binary`", not_cmd)
    clang_cmd = Path(args.clang_cmd or (bindir / "clang"))
    if not clang_cmd.exists():
        die("Invalid `clang` binary`", not_cmd)
    # scan test case for RUN: lines
    run_cmds = []
    infile = Path(args.testcase)
    with infile.open("r") as f:
        for line in f.readlines():
            match = re.match(r".*\s+RUN: (.+)", line)
            if match:
                run_cmds.append(match.group(1).strip())
    if len(run_cmds) < 1:
        die("Could not find any RUN: lines in", infile)

    copied_input = infile.with_suffix(".creduce" + infile.suffix)
    shutil.copy(str(infile), str(copied_input))
    reduce_script_text = "#!/bin/sh\n"
    for cmd in run_cmds:
        compiler_cmd = cmd.replace("%clang_cc1 ", str(clang_cmd) + " -cc1 ")
        compiler_cmd = compiler_cmd.replace("%clang ", str(clang_cmd) + " ")
        compiler_cmd = compiler_cmd.replace("%s", copied_input.name)
        if "|" in compiler_cmd:
          compiler_cmd = compiler_cmd[0:compiler_cmd.find("|")]
        # exit once the first command crashes
        reduce_script_text += "{} --crash {} && exit 0\n".format(not_cmd, compiler_cmd)
    print("Reduce script:\n", reduce_script_text)

    with tempfile.TemporaryDirectory() as tmpdir:
        reduce_script = Path(tmpdir, "reduce_script.sh")
        reduce_script.write_text(reduce_script_text)
        reduce_script.chmod(0o755)
        # print(reduce_script.read_text())
        # run("ulimit -S -c 0".split())
        run(["creduce", str(reduce_script), str(copied_input)], cwd=tmpdir)

    print("DONE!")

if __name__ == "__main__":
    main()
