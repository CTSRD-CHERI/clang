// RUN: %clang_cc1 "-triple" "x86_64-unknown-linux-gnu" "-emit-obj" "-mrelax-all" "-disable-free" "-main-file-name" "driver.cpp" "-mrelocation-model" "static" "-mthread-model" "posix" "-munwind-tables" "-fuse-init-array" "-target-cpu" "x86-64" "-std=c++11" "-fcxx-exceptions" "-fexceptions" "-fdiagnostics-show-option" "-cheri-linker" "-x" "c++" "%s" -emit-llvm -o -

// crazy stuff generated by creduce from a crash when compiling the LLVM test suite:

template <typename> class a {};

template <typename> struct b;
template <typename g> struct b<a<g>> {
  using d = a<g>;
  using e = g *;
  static e f(d, long);
};

class B {
  struct i {
    i(b<a<char>>::e);
  } h;

public:
  B(char *) : h(0) {}
};
struct j {
  struct m : a<int> {
    m(a);
  } typedef d;
  j(d n) : aj(n) { k ? b<a<int>>::f(aj, k) : b<a<int>>::e(); }
  m aj;
  long k;
};
class o : j {
public:
  a<int> l;
  o() : j(l) {}
};
typedef bool au(bool, const char *...);
bool av(bool, const char *...);
template <typename, au> void aw() { o(); }
template <typename, au ax> void ay() { aw<int, ax>; }
class p {
public:
  p(B n) : ba(n) {}
  template <typename bb> operator bb() { ay<bb, av>; }
  B ba;
};
int c() { char **a = p(a[1]); }
